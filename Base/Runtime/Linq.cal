var Enumerable = (function() {
	function Sequence(start, end, step) {
		var ret = {};
		var val = 0;
		
		for(var i = 0; (val = i * step + start) < end; i++)
		{
			ret[i] = val;
		}
		
		return ret;
	}
	
	function Range(start, count) {
		var ret = {};
		
		for(var i = 0; i < count; i++)
		{
			ret[i] = i + start;
		}
		return ret;
	}
	
	function Repeat(element, count) {
		var ret = {};
		for(var i = 0; i < count; i++)
		{
			ret[i] = element;
		}
		return ret;
	}
	
	function Generate(creator, count) {
		var ret = {};
		
		for(var i = 0; i < count; i++)
			ret[i] = creator(i);
		
		return ret;
	}
	
	function Where(filter) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		var ret = {};
		var retIndex = 0;
		var index = 0;
		
		foreach(var e in this)
			if(filter(e))
				ret[retIndex++] = e;
		
		return ret;
	}
	
	function Select(selector) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		var ret = {};
		var index = 0;
		
		foreach(var e in this)
		{
			ret[index] = selector(e);
			index++;
		}
		
		return ret;
	}
	
	function SelectSubset(start, count) extension {
		return this.Skip(start).Take(count);
	}
	
	function Reverse() extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		var length = this.GetType() == "Table" ? this.Length : this.Length();
		
		
		var ret = {};
		var index = length - 1;
		
		for(var i = 0; i < length; i++)
			ret[index--] = this[i];
		
		return ret;
	}
	
	function SequenceEqual(other) extension {
		if(this == null || other == null 
			|| (this.GetType() != "Table" && this.GetType() != "String") 
			|| (other.GetType() != "Table" && other.GetType() != "String"))
			throw ArgumentException();
		
		var length = this.GetType() == "Table" ? this.Length : this.Length();
		var olength = other.GetType() == "Table" ? other.Length : other.Length();
		
		if(length != olength) return false;
		
		for(var index = 0; index < length; index++)
			if(this[index] != other[index])
				return false;
		
		return true;
	}
	
	function ToDictionary(keySelector, valueSelector) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		var ret = {};
		var index = 0;
		foreach(var e in this)
		{
			ret[keySelector(e)] = valueSelector(e);
			index++;
		}
		
		return ret;
	}
	
	function ToListDictionary(keySelector, valueSelector) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
			
		var ret = {};
		var index = 0;
		foreach(var e in this)
		{
			ret[index] = {Key = keySelector(e), Value = valueSelector(e)};
			index++;
		}
		
		return ret;
	}
	
	function Take(number) extension {
		var arg = this;
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		if(this.GetType() == "String") arg = String.ToTable(this);
		
		if(number > arg.Length)
			throw ArgumentOutOfRangeException("number > this.Length");
		
		var ret = {};
		Buffer.BlockCopy(arg, 0, ret, 0, number);
		return ret;
	}
	
	function TakeWhile(predicate) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		var ret = {};
		var index = 0;
		foreach(var e in this)
		{
			if(!predicate(e)) break;
			ret[index] = e;
			index++;
		}
		
		return ret;
	}
	
	function Skip(number) extension {
		var arg = this;
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		if(this.GetType() == "String") arg = String.ToTable(this);
		
		if(number > arg.Length)
			throw ArgumentOutOfRangeException("number > this.Length");
		
		var ret = {};
		Array.Copy(arg, number, ret, 0);
		return ret;
	}
	
	function SkipWhile(predicate) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		var ret = {};
		var retIndex = 0;
		var yielding = false;
		var index = 0;
		foreach(var e in this)
		{
			if(!yielding && !predicate(e)) yielding = true;
			if(yielding) ret[retIndex++] = e;
		}
		
		return ret;
	}
	
	function ForEach(action) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		foreach(var e in this)
		{
			action(e);
		}
	}
	
	function First() extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
			
		var length = this.GetType() == "Table" ? this.Length : this.Length();
		
		if(length < 1)
			throw ArgumentException();
		
		foreach(var e in this)
			return e;
			
		throw ArgumentException();
	}
	
	function First(filter) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		foreach(var e in this)
			if(filter(e))
				return e;
		
		throw ArgumentException();
	}
	
	function FirstOrDefault() extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		var length = this.GetType() == "Table" ? this.Length : this.Length();
		
		if(length < 1) return null;
		
		foreach(var e in this)
			return e;
		return null;
	}
	
	function FirstOrDefault(filter) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		foreach(var e in this)
			if(filter(e))
				return e;
		
		return null;
	}
	
	function Last() extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		var length = this.GetType() == "Table" ? this.Length : this.Length();
		
		if(length < 1)
			throw ArgumentException();
		
		return this[length - 1];
	}
	
	function Last(filter) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		var last = null;
		var found = false;
		
		foreach(var e in this)
			if(filter(e))
			{
				last = e;
				found = true;
			}
		
		if(!found)
			throw ArgumentException();
		else
			return last;
	}
	
	function LastOrDefault() extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		var length = this.GetType() == "Table" ? this.Length : this.Length();
		
		if(length < 1) return null;
		
		return this[length - 1];
	}
	
	function LastOrDefault(filter) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		var last = null;
		
		foreach(var e in this)
			if(filter(e))
			{
				last = e;
				found = true;
			}
		
		return last;
	}
	
	function Single() extension {
		return this.First();
	}
	
	function Single(what) extension {
		return this.First(what);
	}
	
	function Any() extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		foreach(var e in this)
			return true;
		
		return false;
	}
	
	function Any(what) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		foreach(var e in this)
		{
			if(what(e))
				return true;
		}
		return false;
	}
	
	function All(what) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		foreach(var e in this)
			if(!what(e))
				return false;
		return true;
	}
	
	function Concat(other) extension {
		if(this == null || other == null 
			|| (this.GetType() != "Table" && this.GetType() != "String") 
			|| (other.GetType() != "Table" && other.GetType() != "String"))
			throw ArgumentException();
		
		var ret = {};
		var index = 0;
		foreach(var e in this)
			ret[index++] = e;
		foreach(var e in other)
			ret[index++] = e;
		
		return ret;
	}
	
	function Zip(other, selector) extension {
		if(this == null || other == null 
			|| (this.GetType() != "Table" && this.GetType() != "String") 
			|| (other.GetType() != "Table" && other.GetType() != "String"))
			throw ArgumentException();
		
		var length = this.GetType() == "Table" ? this.Length : this.Length();
		var olength = other.GetType() == "Table" ? other.Length : other.Length();
		
		var ret = {};
		length = Math.Min(length, olength);
		
		for(i = 0; i < length; i++)
			ret[i] = selector(this[i], other[i]);
		
		return ret;
	}
	
	function Aggregate(func) extension {
		return this.Aggregate(null, func);
	}
	
	function Aggregate(init, func) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		var length = this.GetType() == "Table" ? this.Length : this.Length();
		if(length < 1) return null;
		
		var result = init;
		foreach(var e in this)
			if(result == null)
				result = e;
			else
				result = func(result, e);
		
		return result;
	}
	
	function Contains(what) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		return this.Any(function(e, i) return e == what);
	}
	
	function Min() extension {
		if(this == null || this.GetType() != "Table" || this.Length < 1)
			throw ArgumentException();
		
		var min = null;
		foreach(var e in this)
		{
			if(min == null || e < min)
				min = e;
		}
		
		return min;
	}
	
	function Min(selector) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		return this.Select(selector).Min();
	}
	
	function Max() extension {
		if(this == null || this.GetType() != "Table" || this.Length < 1)
			throw ArgumentException();
		
		var max = null;
		foreach(var e in this)
		{
			if(max == null || e > max)
				max = e;
		}
		
		return max;
	}
	
	function Max(selector) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		return this.Select(selector).Max();
	}
	
	function Average() extension {
		if(this == null || this.GetType() != "Table")
			throw ArgumentException();
		
		var sum = 0;
		var count = 0;
		foreach(var e in this)
		{
			sum = sum + e;
			count++;
		}
		
		if(count > 0) return sum / count;
		throw ArgumentException();
	}
	
	function Average(selector) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		return this.Select(selector).Average();
	}
	
	function Sum() extension {
		if(this == null || this.GetType() != "Table")
			throw ArgumentException();
		
		var sum = 0;
		
		foreach(var e in this)
			sum = sum + e;
		
		return sum;
	}
	
	function Sum(selector) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		return this.Select(selector).Sum();
	}
	
	function OrderBy(selector) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		var keys = {};
		var ret = {};
		var index = 0;
		
		foreach(var e in this)
		{
			keys[index] = selector(e);
			ret[index] = e;
			index++;
		}
		
		Array.Sort(keys, ret);
		
		return ret;
	}
	
	function OrderByDescending(selector) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		return this.OrderBy(selector).Reverse();
	}
	
	function Count() extension {
		return this.Count(x => true);
	}
	
	function Count(filter) extension {
		if(this == null || (this.GetType() != "Table" && this.GetType() != "String"))
			throw ArgumentException();
		
		var count = 0;
		foreach(var e in this)
			if(filter(e))
				count++;
		return count;
	}
	
	return {
		Range = Range,
		Sequence = Sequence,
		Repeat = Repeat,
		Generate = Generate
	};
})();
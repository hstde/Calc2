var MidpointRounding = {ToEven = 0, AwayFromZero = 1};

var Math = (function() {

	var maxRoundingDigits = 15;
	var roundPower10 = {
		1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8,
		1e9, 1e10, 1e11, 1e12, 1e13, 1e14, 1e15
	};

	function Abs(value) {
		if(value < 0) return -value;
		return value;
	}
	
	function Min(val1, val2) {
		if(val1 < val2) return val1;
		return val2;
	}
	
	function Max(val1, val2) {
		if(val1 < val2) return val2;
		return val1;
	}
	
	extern function Floor(value : number);
	
	extern function Ceiling(value : number);
	
	function InternalRound(value : number, digits, mode) {
		var power10 = roundPower10[digits];
		value *= power10;
		if(mode == MidpointRounding.AwayFromZero)
		{
			var int = Int(value);
			var fraction = value - int;
			if(Abs(fraction) >= 0.5)
				value += Sign(fraction);
		}
		else
			value = Round(value);
		value /= power10;
		
		return value;
	}
	
	function Round(value : number, digits : number) {
		if(digits < 0 || digits > maxRoundingDigits)
			throw ArgumentOutOfRangeException("digits");
		
		return InternalRound(value, digits, MidpointRounding.ToEven);
	}
	
	extern function Round(value : number);
	
	extern function Int(value : number);
	
	function Sign(value) {
		if(value < 0)
			return -1;
		else if(value > 0)
			return 1;
		else
			return 0;
	}
	
	extern function Acos(value : number);
	
	extern function Asin(value : number);
	
	extern function Atan(value : number);
	
	extern function Atan2(y : number, x : number);
	
	extern function Cos(value : number);
	
	extern function Cosh(value : number);
	
	extern function Sin(value : number);
	
	extern function Tan(value : number);
	
	extern function Sinh(value : number);
	
	extern function Tanh(value : number);
	
	extern function Sqrt(value : number);
	
	extern function Log(value : number);
	
	extern function Log10(value : number);
	
	function Log(value : number, base : number) {
		if(value <= 0 || base <= 0)
			throw ArithmeticException();
		return Log(value) / Log(base);
	}
	
	extern function Exp(value : number);
	
	extern function Pow(x : number, y : number);
	
	function IEEERemainder(x : number, y : number) {
		var regularMod = x % y;
		if(regularMod == 0 && x < 0)
			return -0;
		
		var alternativeResult = regularMod - (Math.Abs(y) * Math.Sign(x));
		if(Math.Abs(alternativeResult) == Math.Abs(regularMod))
		{
			var divisionResult = x / y;
			var roundedResult = Math.Round(regularMod);
			if(Math.Abs(roundedResult) > Math.Abs(divisionResult)) 
			{
				return alternativeResult;
			}
			else
			{
				return regularMod;
			}
		}
		if(Math.Abs(alternativeResult) < Math.Abs(regularMod))
		{
			return alternativeResult;
		}
		else
		{
			return regularMod;
		}
	}
	
	function DivRem(a : number, b : number) {
		return { div = a / b, rem = a % b };
	}
	
	return {
		PI = 3.14159265358979323846,
		E  = 2.7182818284590452354,
		Abs = Abs,
		Min = Min,
		Max = Max,
		Floor = Floor,
		Ceiling = Ceiling,
		Round = Round,
		Int = Int,
		Sign = Sign,
		Acos = Acos,
		Asin = Asin,
		Atan = Atan,
		Atan2 = Atan2,
		Cos = Cos,
		Cosh = Cosh,
		Sin = Sin,
		Tan = Tan,
		Sinh = Sinh,
		Tanh = Tanh,
		Sqrt = Sqrt,
		Log = Log,
		Log10 = Log10,
		Exp = Exp,
		Pow = Pow,
		IEEERemainder = IEEERemainder,
		DivRem = DivRem
	};
})();
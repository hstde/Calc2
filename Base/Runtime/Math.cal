var MidpointRounding = {ToEven = 0, AwayFromZero = 1};

var Math = (function() {

	var maxRoundingDigits = 15;
	var roundPower10 = {
		1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8,
		1e9, 1e10, 1e11, 1e12, 1e13, 1e14, 1e15
	};

	function Abs(value) {
		if(value < 0) return -value;
		return value;
	}
	
	function Min(val1, val2) {
		if(val1 < val2) return val1;
		return val2;
	}
	
	function Max(val1, val2) {
		if(val1 < val2) return val2;
		return val1;
	}
	
	function Floor(value) {
		
	}
	
	function Ceiling(value) {
		
	}
	
	function InternalRound(value, digits, mode) {
		var power10 = roundPower10[digits];
		value *= power10;
		if(mode == MidpointRounding.AwayFromZero)
		{
			var int = Int(value);
			var fraction = value - int;
			if(Abs(fraction) >= 0.5)
				value += Sign(fraction);
		}
		else
			Throw("What");
		value /= power10;
		
		return value;
	}
	
	function Round(value, digits) {
		if(digits < 0 || digits > maxRoundingDigits)
			Throw("ArgumentOutOfRangeException", "digits");
		
		return InternalRound(value, digits, MidpointRounding.ToEven);
	}
	
	function Round(value) {
		return Round(value, 0);
	}
	
	function Int(value) {
		if(value.GetType() != "Number") Throw("ArgumentException");
		return __Int(value);
	}
	
	function Sign(value) {
		if(value < 0)
			return -1;
		else if(value > 0)
			return 1;
		else
			return 0;
	}
	
	function DivRem(a, b) {
		return { div = a / b, rem = a % b };
	}
	
	return {
		PI = 3.14159265358979323846,
		E  = 2.7182818284590452354,
		Abs = Abs,
		Min = Min,
		Max = Max,
		Floor = Floor,
		Ceiling = Ceiling,
		Round = Round,
		Int = Int,
		Sign = Sign,
		DivRem = DivRem
	};
})();
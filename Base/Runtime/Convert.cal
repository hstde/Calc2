var Convert = (function() {
	
	var NumberFormatFlags = {
		LeftAlign = 0x1,
		CenterAlign = 0x2,
		RightAlign = 0x4,
		PrefixSpace = 0x8,
		PrintSign = 0x10,
		PrintBase = 0x20,
		PrintAsI1 = 0x40,
		PrintAsI2 = 0x80,
		PrintAsI4 = 0x100,
		PrintRadixBase = 0x200,
		AlternateForm = 0x400,
		PrintAsUpper = 0x800
	};
	
	function NumberToStringInternal(n, radix, width, paddingChar, flags) {
		var isNegative = false;
		var printAsUpper = false;
		var index = 0;
		var charVal;
		var buffLength;
		var i;
		var l;
		var buffer = {};
		
		if(n < 0)
		{
			isNegative = true;
			if(radix == 10)
				l = -n;
			else
				l = n;
		}
		else
			l = n;
		
		if((flags & NumberFormatFlags.PrintAsI1) != 0)
			l &= 0xFF;
		if((flags & NumberFormatFlags.PrintAsI2) != 0)
			l &= 0xFFFF;
		if((flags & NumberFormatFlags.PrintAsI4) != 0)
			l &= 0xFFFF_FFFF;
		if((flags & NumberFormatFlags.PrintAsUpper) != 0)
			printAsUpper = true;
		
		if(l == 0)
		{
			buffer[0] = '0';
			index = 1;
		}
		else
		{
			var hexStart = printAsUpper ? 'A' : 'a';
			do
			{
				charVal = l % radix;
				l /= radix;
				if(charVal < 10)
					buffer[index++] = (charVal + '0').ToChar();
				else
					buffer[index++] = ((charVal - 10) + hexStart).ToChar();
			} while(l != 0);
		}
		
		if(radix != 10 && ((flags & NumberFormatFlags.PrintBase) != 0))
		{
			if(radix == 16)
			{
				buffer[index++] = 'x';
				buffer[index++] = '0';
			}
			else if(radix == 8)
				buffer[index++] = '0';
			else if(radix == 2)
			{
				buffer[index++] = 'b';
				buffer[index++] = '0';
			}
		}
		
		if(radix == 10)
		{
			if(isNegative)
				buffer[index++] = '-';
			else if((flags & NumberFormatFlags.PrintSign) != 0)
				buffer[index++] = '+';
			else if((flags & NumberFormatFlags.PrefixSpace) != 0)
				buffer[index++] = ' ';
		}
		
		if(width <= index)
			buffLength = index;
		else
			buffLength = width;
		
		var localBuffer = {};
		
		if((flags & NumberFormatFlags.LeftAlign) != 0)
		{
			for(i = 0; i < index; i++)
				localBuffer[i] = buffer[index - i - 1];
			for(; i < buffLength; i++)
				localBuffer[i] = paddingChar;
		}
		else
		{
			for(i = 0; i < index; i++)
				localBuffer[buffLength - i - 1] = buffer[i];
			for(var j = buffLength - i - 1; j >= 0; j--)
				localBuffer[j] = paddingChar;
		}
		
		return String.Concat(localBuffer);
	}
	
	function NumberToString(value, base, width, paddingChar, flags) {
		if(base != 2 && base != 8 && base != 10 && base != 16)
			Throw("ArgumentException", "Invalid base");
		return NumberToStringInternal(Math.Int(value), base, width, paddingChar, flags);
	}
	
	function ToString(value) {
		if(value == null) return "";
		return value.ToString();
	}
	
	function ToString(value, base) {
		return ToString(value, base, -1, ' ', NumberFormatFlags.PrintAsI4);
	}
	
	function ToString(value, base, flags) {
		return ToString(value, base, -1, ' ', flags);
	}
	
	function ToString(value, base, width, paddingChar, flags) {
		if(value == null) return "";
		if(value.GetType() != "Number") return ToString(value);
		return NumberToString(value, base, width, paddingChar, flags);
	}
	
	return {
		NumberFormatFlags = NumberFormatFlags,
		
		ToString = ToString
	};
})();